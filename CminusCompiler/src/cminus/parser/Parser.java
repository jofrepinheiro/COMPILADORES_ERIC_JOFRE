/* This file was generated by SableCC (http://www.sablecc.org/). */

package cminus.parser;

import cminus.lexer.*;
import cminus.node.*;
import cminus.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AMainDeclDeclMain */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AListaDeclListaDeclaracoes */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list);
            }
            break;
            case 3: /* reduce AUnicaDeclListaDeclaracoes */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce ADeclVarDeclaracao */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list);
            }
            break;
            case 5: /* reduce ADeclFunDeclaracao */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce ATipoDeclVar */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list);
            }
            break;
            case 7: /* reduce AStringVarTipovar */
            {
                ArrayList<Object> list = new7();
                push(goTo(5), list);
            }
            break;
            case 8: /* reduce AIntVarTipovar */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list);
            }
            break;
            case 9: /* reduce ANormalFun$Fun1DeclFun */
            {
                ArrayList<Object> list = new9();
                push(goTo(6), list);
            }
            break;
            case 10: /* reduce ANormalFun$FunVoid1DeclFun */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list);
            }
            break;
            case 11: /* reduce AListaParametroParametros */
            {
                ArrayList<Object> list = new11();
                push(goTo(7), list);
            }
            break;
            case 12: /* reduce AVoidParametroParametros */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list);
            }
            break;
            case 13: /* reduce AMultiparametroListaParametro */
            {
                ArrayList<Object> list = new13();
                push(goTo(8), list);
            }
            break;
            case 14: /* reduce AParametroListaParametro */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list);
            }
            break;
            case 15: /* reduce ADeclParamParametro */
            {
                ArrayList<Object> list = new15();
                push(goTo(9), list);
            }
            break;
            case 16: /* reduce AAlistainstrucoesinstrucoescompostas1InstrucoesCompostas */
            {
                ArrayList<Object> list = new16();
                push(goTo(10), list);
            }
            break;
            case 17: /* reduce AAlistainstrucoesinstrucoescompostas2InstrucoesCompostas */
            {
                ArrayList<Object> list = new17();
                push(goTo(10), list);
            }
            break;
            case 18: /* reduce AMultipleDeclLocal */
            {
                ArrayList<Object> list = new18();
                push(goTo(11), list);
            }
            break;
            case 19: /* reduce ASingleDeclLocal */
            {
                ArrayList<Object> list = new19();
                push(goTo(11), list);
            }
            break;
            case 20: /* reduce AInstrucoesListaInstrucoes */
            {
                ArrayList<Object> list = new20();
                push(goTo(12), list);
            }
            break;
            case 21: /* reduce AInstrucaoListaInstrucoes */
            {
                ArrayList<Object> list = new21();
                push(goTo(12), list);
            }
            break;
            case 22: /* reduce ANaoPendenteInstrucao */
            {
                ArrayList<Object> list = new22();
                push(goTo(13), list);
            }
            break;
            case 23: /* reduce APendenteInstrucao */
            {
                ArrayList<Object> list = new23();
                push(goTo(13), list);
            }
            break;
            case 24: /* reduce AIfelseNaoPendente */
            {
                ArrayList<Object> list = new24();
                push(goTo(14), list);
            }
            break;
            case 25: /* reduce AInstExprNaoPendente */
            {
                ArrayList<Object> list = new25();
                push(goTo(14), list);
            }
            break;
            case 26: /* reduce AInstReturnNaoPendente */
            {
                ArrayList<Object> list = new26();
                push(goTo(14), list);
            }
            break;
            case 27: /* reduce AIfPendentePendente */
            {
                ArrayList<Object> list = new27();
                push(goTo(15), list);
            }
            break;
            case 28: /* reduce AIfelsePendentePendente */
            {
                ArrayList<Object> list = new28();
                push(goTo(15), list);
            }
            break;
            case 29: /* reduce AInstWhilePendente */
            {
                ArrayList<Object> list = new29();
                push(goTo(15), list);
            }
            break;
            case 30: /* reduce AExprInstExpr */
            {
                ArrayList<Object> list = new30();
                push(goTo(16), list);
            }
            break;
            case 31: /* reduce AInstrucaoWhileInstWhile */
            {
                ArrayList<Object> list = new31();
                push(goTo(17), list);
            }
            break;
            case 32: /* reduce AInstrucaoReturnInstReturn */
            {
                ArrayList<Object> list = new32();
                push(goTo(18), list);
            }
            break;
            case 33: /* reduce AAtribuicaoExpr */
            {
                ArrayList<Object> list = new33();
                push(goTo(19), list);
            }
            break;
            case 34: /* reduce ANoAtrExprExpr */
            {
                ArrayList<Object> list = new34();
                push(goTo(19), list);
            }
            break;
            case 35: /* reduce AExprAritimeticaNoAtrExpr */
            {
                ArrayList<Object> list = new35();
                push(goTo(20), list);
            }
            break;
            case 36: /* reduce AExprLogicaNoAtrExpr */
            {
                ArrayList<Object> list = new36();
                push(goTo(20), list);
            }
            break;
            case 37: /* reduce ALessExprLogica */
            {
                ArrayList<Object> list = new37();
                push(goTo(21), list);
            }
            break;
            case 38: /* reduce ALessorequalExprLogica */
            {
                ArrayList<Object> list = new38();
                push(goTo(21), list);
            }
            break;
            case 39: /* reduce AGreaterExprLogica */
            {
                ArrayList<Object> list = new39();
                push(goTo(21), list);
            }
            break;
            case 40: /* reduce AGreaterorequalExprLogica */
            {
                ArrayList<Object> list = new40();
                push(goTo(21), list);
            }
            break;
            case 41: /* reduce AEqualExprLogica */
            {
                ArrayList<Object> list = new41();
                push(goTo(21), list);
            }
            break;
            case 42: /* reduce ADifferentExprLogica */
            {
                ArrayList<Object> list = new42();
                push(goTo(21), list);
            }
            break;
            case 43: /* reduce ASomaExprAritimetica */
            {
                ArrayList<Object> list = new43();
                push(goTo(22), list);
            }
            break;
            case 44: /* reduce ASubtracaoExprAritimetica */
            {
                ArrayList<Object> list = new44();
                push(goTo(22), list);
            }
            break;
            case 45: /* reduce ATermoExprAritimetica */
            {
                ArrayList<Object> list = new45();
                push(goTo(22), list);
            }
            break;
            case 46: /* reduce ATermoExprMultTermo */
            {
                ArrayList<Object> list = new46();
                push(goTo(23), list);
            }
            break;
            case 47: /* reduce ATermoExprDivTermo */
            {
                ArrayList<Object> list = new47();
                push(goTo(23), list);
            }
            break;
            case 48: /* reduce AFatorTermo */
            {
                ArrayList<Object> list = new48();
                push(goTo(23), list);
            }
            break;
            case 49: /* reduce AFatorExprFator */
            {
                ArrayList<Object> list = new49();
                push(goTo(24), list);
            }
            break;
            case 50: /* reduce AFatorVarFator */
            {
                ArrayList<Object> list = new50();
                push(goTo(24), list);
            }
            break;
            case 51: /* reduce AChamadaFunFator */
            {
                ArrayList<Object> list = new51();
                push(goTo(24), list);
            }
            break;
            case 52: /* reduce ANumeroFator */
            {
                ArrayList<Object> list = new52();
                push(goTo(24), list);
            }
            break;
            case 53: /* reduce AChamaFunChamadaFun */
            {
                ArrayList<Object> list = new53();
                push(goTo(25), list);
            }
            break;
            case 54: /* reduce AAcomargsargs1Args */
            {
                ArrayList<Object> list = new54();
                push(goTo(26), list);
            }
            break;
            case 55: /* reduce AAcomargsargs2Args */
            {
                ArrayList<Object> list = new55();
                push(goTo(26), list);
            }
            break;
            case 56: /* reduce AMultiArgsListaArgs */
            {
                ArrayList<Object> list = new56();
                push(goTo(27), list);
            }
            break;
            case 57: /* reduce AUmArgsListaArgs */
            {
                ArrayList<Object> list = new57();
                push(goTo(27), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PDeclaracao pdeclaracaoNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pdeclaracaoNode4 = (PDeclaracao)nodeArrayList2.get(0);

        pprogramNode1 = new AProgram(listNode3, pdeclaracaoNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AMainDeclDeclMain */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PInstrucoesCompostas pinstrucoescompostasNode2;
        pinstrucoescompostasNode2 = (PInstrucoesCompostas)nodeArrayList6.get(0);

        pdeclaracaoNode1 = new AMainFunDeclaracao(pinstrucoescompostasNode2);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AListaDeclListaDeclaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList2.get(0);
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode3.add(pdeclaracaoNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AUnicaDeclListaDeclaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode2.add(pdeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADeclVarDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ADeclFunDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ATipoDeclVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pdeclaracaoNode1 = new AVarDeclaracao(ptipoNode2, tidNode3);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AStringVarTipovar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TKwString tkwstringNode2;
        tkwstringNode2 = (TKwString)nodeArrayList1.get(0);

        ptipoNode1 = new AStringTipo(tkwstringNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AIntVarTipovar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TKwInt tkwintNode2;
        tkwintNode2 = (TKwInt)nodeArrayList1.get(0);

        ptipoNode1 = new AIntTipo(tkwintNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ANormalFun$Fun1DeclFun */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PInstrucoesCompostas pinstrucoescompostasNode6;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pinstrucoescompostasNode6 = (PInstrucoesCompostas)nodeArrayList6.get(0);

        pdeclaracaoNode1 = new AFunDeclaracao(ptipoNode2, tidNode3, listNode5, pinstrucoescompostasNode6);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ANormalFun$FunVoid1DeclFun */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PInstrucoesCompostas pinstrucoescompostasNode7;
        {
            // Block
        TKwVoid tkwvoidNode3;
        tkwvoidNode3 = (TKwVoid)nodeArrayList1.get(0);

        ptipoNode2 = new AVoidTipo(tkwvoidNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pinstrucoescompostasNode7 = (PInstrucoesCompostas)nodeArrayList6.get(0);

        pdeclaracaoNode1 = new AFunDeclaracao(ptipoNode2, tidNode4, listNode6, pinstrucoescompostasNode7);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AListaParametroParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AVoidParametroParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PParametro pparametroNode1;
        {
            // Block
        TKwVoid tkwvoidNode2;
        tkwvoidNode2 = (TKwVoid)nodeArrayList1.get(0);

        pparametroNode1 = new ADeclParamVoidParametro(tkwvoidNode2);
        }
	if(pparametroNode1 != null)
	{
	  listNode3.add(pparametroNode1);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AMultiparametroListaParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PParametro pparametroNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pparametroNode1 = (PParametro)nodeArrayList3.get(0);
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(pparametroNode1 != null)
	{
	  listNode3.add(pparametroNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AParametroListaParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParametro pparametroNode1;
        pparametroNode1 = (PParametro)nodeArrayList1.get(0);
	if(pparametroNode1 != null)
	{
	  listNode2.add(pparametroNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ADeclParamParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparametroNode1 = new ADeclParamParametro(ptipoNode2, tidNode3);
        }
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAlistainstrucoesinstrucoescompostas1InstrucoesCompostas */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrucoesCompostas pinstrucoescompostasNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pinstrucoescompostasNode1 = new AInstrucoesCompostas(listNode2, listNode4);
        }
	nodeList.add(pinstrucoescompostasNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAlistainstrucoesinstrucoescompostas2InstrucoesCompostas */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrucoesCompostas pinstrucoescompostasNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pinstrucoescompostasNode1 = new AInstrucoesCompostas(listNode3, listNode5);
        }
	nodeList.add(pinstrucoescompostasNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AMultipleDeclLocal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList2.get(0);
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode3.add(pdeclaracaoNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ASingleDeclLocal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode2.add(pdeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AInstrucoesListaInstrucoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PInstrucao pinstrucaoNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pinstrucaoNode1 = (PInstrucao)nodeArrayList2.get(0);
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(pinstrucaoNode1 != null)
	{
	  listNode3.add(pinstrucaoNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AInstrucaoListaInstrucoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PInstrucao pinstrucaoNode1;
        pinstrucaoNode1 = (PInstrucao)nodeArrayList1.get(0);
	if(pinstrucaoNode1 != null)
	{
	  listNode2.add(pinstrucaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ANaoPendenteInstrucao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrucao pinstrucaoNode1;
        pinstrucaoNode1 = (PInstrucao)nodeArrayList1.get(0);
	nodeList.add(pinstrucaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce APendenteInstrucao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrucao pinstrucaoNode1;
        pinstrucaoNode1 = (PInstrucao)nodeArrayList1.get(0);
	nodeList.add(pinstrucaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AIfelseNaoPendente */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrucao pinstrucaoNode1;
        {
            // Block
        PExprLogica pexprlogicaNode2;
        PInstrucao pinstrucaoNode3;
        PInstrucao pinstrucaoNode4;
        pexprlogicaNode2 = (PExprLogica)nodeArrayList3.get(0);
        pinstrucaoNode3 = (PInstrucao)nodeArrayList5.get(0);
        pinstrucaoNode4 = (PInstrucao)nodeArrayList7.get(0);

        pinstrucaoNode1 = new AIfelseInstrucao(pexprlogicaNode2, pinstrucaoNode3, pinstrucaoNode4);
        }
	nodeList.add(pinstrucaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AInstExprNaoPendente */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrucao pinstrucaoNode1;
        pinstrucaoNode1 = (PInstrucao)nodeArrayList1.get(0);
	nodeList.add(pinstrucaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AInstReturnNaoPendente */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrucao pinstrucaoNode1;
        pinstrucaoNode1 = (PInstrucao)nodeArrayList1.get(0);
	nodeList.add(pinstrucaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AIfPendentePendente */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrucao pinstrucaoNode1;
        {
            // Block
        PExprLogica pexprlogicaNode2;
        PInstrucao pinstrucaoNode3;
        pexprlogicaNode2 = (PExprLogica)nodeArrayList3.get(0);
        pinstrucaoNode3 = (PInstrucao)nodeArrayList5.get(0);

        pinstrucaoNode1 = new AIfPendenteInstrucao(pexprlogicaNode2, pinstrucaoNode3);
        }
	nodeList.add(pinstrucaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AIfelsePendentePendente */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrucao pinstrucaoNode1;
        {
            // Block
        PExprLogica pexprlogicaNode2;
        PInstrucao pinstrucaoNode3;
        PInstrucao pinstrucaoNode4;
        pexprlogicaNode2 = (PExprLogica)nodeArrayList3.get(0);
        pinstrucaoNode3 = (PInstrucao)nodeArrayList5.get(0);
        pinstrucaoNode4 = (PInstrucao)nodeArrayList7.get(0);

        pinstrucaoNode1 = new AIfelseInstrucao(pexprlogicaNode2, pinstrucaoNode3, pinstrucaoNode4);
        }
	nodeList.add(pinstrucaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AInstWhilePendente */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrucao pinstrucaoNode1;
        pinstrucaoNode1 = (PInstrucao)nodeArrayList1.get(0);
	nodeList.add(pinstrucaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AExprInstExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrucao pinstrucaoNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pinstrucaoNode1 = new AInstExprInstrucao(pexprNode2);
        }
	nodeList.add(pinstrucaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AInstrucaoWhileInstWhile */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrucao pinstrucaoNode1;
        {
            // Block
        PExprLogica pexprlogicaNode2;
        PInstrucao pinstrucaoNode3;
        pexprlogicaNode2 = (PExprLogica)nodeArrayList3.get(0);
        pinstrucaoNode3 = (PInstrucao)nodeArrayList5.get(0);

        pinstrucaoNode1 = new AInstWhileInstrucao(pexprlogicaNode2, pinstrucaoNode3);
        }
	nodeList.add(pinstrucaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AInstrucaoReturnInstReturn */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrucao pinstrucaoNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);

        pinstrucaoNode1 = new AInstReturnInstrucao(pexprNode2);
        }
	nodeList.add(pinstrucaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAtribuicaoExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TId tidNode2;
        PExpr pexprNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AAtribuicaoExpr(tidNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ANoAtrExprExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AExprAritimeticaNoAtrExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExprAritimetica pexpraritimeticaNode2;
        pexpraritimeticaNode2 = (PExprAritimetica)nodeArrayList1.get(0);

        pexprNode1 = new AExprAritimeticaExpr(pexpraritimeticaNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AExprLogicaNoAtrExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExprLogica pexprlogicaNode2;
        pexprlogicaNode2 = (PExprLogica)nodeArrayList1.get(0);

        pexprNode1 = new AExprLogicaExpr(pexprlogicaNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ALessExprLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprLogica pexprlogicaNode1;
        {
            // Block
        PExprAritimetica pexpraritimeticaNode2;
        PExprAritimetica pexpraritimeticaNode3;
        pexpraritimeticaNode2 = (PExprAritimetica)nodeArrayList1.get(0);
        pexpraritimeticaNode3 = (PExprAritimetica)nodeArrayList3.get(0);

        pexprlogicaNode1 = new AMenorExprLogica(pexpraritimeticaNode2, pexpraritimeticaNode3);
        }
	nodeList.add(pexprlogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ALessorequalExprLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprLogica pexprlogicaNode1;
        {
            // Block
        PExprAritimetica pexpraritimeticaNode2;
        PExprAritimetica pexpraritimeticaNode3;
        pexpraritimeticaNode2 = (PExprAritimetica)nodeArrayList1.get(0);
        pexpraritimeticaNode3 = (PExprAritimetica)nodeArrayList3.get(0);

        pexprlogicaNode1 = new AMenorigualExprLogica(pexpraritimeticaNode2, pexpraritimeticaNode3);
        }
	nodeList.add(pexprlogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AGreaterExprLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprLogica pexprlogicaNode1;
        {
            // Block
        PExprAritimetica pexpraritimeticaNode2;
        PExprAritimetica pexpraritimeticaNode3;
        pexpraritimeticaNode2 = (PExprAritimetica)nodeArrayList1.get(0);
        pexpraritimeticaNode3 = (PExprAritimetica)nodeArrayList3.get(0);

        pexprlogicaNode1 = new AMaiorExprLogica(pexpraritimeticaNode2, pexpraritimeticaNode3);
        }
	nodeList.add(pexprlogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AGreaterorequalExprLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprLogica pexprlogicaNode1;
        {
            // Block
        PExprAritimetica pexpraritimeticaNode2;
        PExprAritimetica pexpraritimeticaNode3;
        pexpraritimeticaNode2 = (PExprAritimetica)nodeArrayList1.get(0);
        pexpraritimeticaNode3 = (PExprAritimetica)nodeArrayList3.get(0);

        pexprlogicaNode1 = new AMaiorigualExprLogica(pexpraritimeticaNode2, pexpraritimeticaNode3);
        }
	nodeList.add(pexprlogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AEqualExprLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprLogica pexprlogicaNode1;
        {
            // Block
        PExprAritimetica pexpraritimeticaNode2;
        PExprAritimetica pexpraritimeticaNode3;
        pexpraritimeticaNode2 = (PExprAritimetica)nodeArrayList1.get(0);
        pexpraritimeticaNode3 = (PExprAritimetica)nodeArrayList3.get(0);

        pexprlogicaNode1 = new AIgualExprLogica(pexpraritimeticaNode2, pexpraritimeticaNode3);
        }
	nodeList.add(pexprlogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ADifferentExprLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprLogica pexprlogicaNode1;
        {
            // Block
        PExprAritimetica pexpraritimeticaNode2;
        PExprAritimetica pexpraritimeticaNode3;
        pexpraritimeticaNode2 = (PExprAritimetica)nodeArrayList1.get(0);
        pexpraritimeticaNode3 = (PExprAritimetica)nodeArrayList3.get(0);

        pexprlogicaNode1 = new ADiferenteExprLogica(pexpraritimeticaNode2, pexpraritimeticaNode3);
        }
	nodeList.add(pexprlogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ASomaExprAritimetica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprAritimetica pexpraritimeticaNode1;
        {
            // Block
        PExprAritimetica pexpraritimeticaNode2;
        PExprAritimetica pexpraritimeticaNode3;
        pexpraritimeticaNode2 = (PExprAritimetica)nodeArrayList1.get(0);
        pexpraritimeticaNode3 = (PExprAritimetica)nodeArrayList3.get(0);

        pexpraritimeticaNode1 = new AAddExprAritimetica(pexpraritimeticaNode2, pexpraritimeticaNode3);
        }
	nodeList.add(pexpraritimeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ASubtracaoExprAritimetica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprAritimetica pexpraritimeticaNode1;
        {
            // Block
        PExprAritimetica pexpraritimeticaNode2;
        PExprAritimetica pexpraritimeticaNode3;
        pexpraritimeticaNode2 = (PExprAritimetica)nodeArrayList1.get(0);
        pexpraritimeticaNode3 = (PExprAritimetica)nodeArrayList3.get(0);

        pexpraritimeticaNode1 = new ASubExprAritimetica(pexpraritimeticaNode2, pexpraritimeticaNode3);
        }
	nodeList.add(pexpraritimeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ATermoExprAritimetica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprAritimetica pexpraritimeticaNode1;
        pexpraritimeticaNode1 = (PExprAritimetica)nodeArrayList1.get(0);
	nodeList.add(pexpraritimeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ATermoExprMultTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprAritimetica pexpraritimeticaNode1;
        {
            // Block
        PExprAritimetica pexpraritimeticaNode2;
        PExprAritimetica pexpraritimeticaNode3;
        pexpraritimeticaNode2 = (PExprAritimetica)nodeArrayList1.get(0);
        pexpraritimeticaNode3 = (PExprAritimetica)nodeArrayList3.get(0);

        pexpraritimeticaNode1 = new AMultExprAritimetica(pexpraritimeticaNode2, pexpraritimeticaNode3);
        }
	nodeList.add(pexpraritimeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ATermoExprDivTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprAritimetica pexpraritimeticaNode1;
        {
            // Block
        PExprAritimetica pexpraritimeticaNode2;
        PExprAritimetica pexpraritimeticaNode3;
        pexpraritimeticaNode2 = (PExprAritimetica)nodeArrayList1.get(0);
        pexpraritimeticaNode3 = (PExprAritimetica)nodeArrayList3.get(0);

        pexpraritimeticaNode1 = new ADivExprAritimetica(pexpraritimeticaNode2, pexpraritimeticaNode3);
        }
	nodeList.add(pexpraritimeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AFatorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprAritimetica pexpraritimeticaNode1;
        pexpraritimeticaNode1 = (PExprAritimetica)nodeArrayList1.get(0);
	nodeList.add(pexpraritimeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AFatorExprFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprAritimetica pexpraritimeticaNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);

        pexpraritimeticaNode1 = new AExprExprAritimetica(pexprNode2);
        }
	nodeList.add(pexpraritimeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AFatorVarFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprAritimetica pexpraritimeticaNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpraritimeticaNode1 = new AVariavelExprAritimetica(tidNode2);
        }
	nodeList.add(pexpraritimeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AChamadaFunFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprAritimetica pexpraritimeticaNode1;
        pexpraritimeticaNode1 = (PExprAritimetica)nodeArrayList1.get(0);
	nodeList.add(pexpraritimeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ANumeroFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprAritimetica pexpraritimeticaNode1;
        {
            // Block
        TNum tnumNode2;
        tnumNode2 = (TNum)nodeArrayList1.get(0);

        pexpraritimeticaNode1 = new ANumeroExprAritimetica(tnumNode2);
        }
	nodeList.add(pexpraritimeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AChamaFunChamadaFun */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprAritimetica pexpraritimeticaNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpraritimeticaNode1 = new AChamadaFunExprAritimetica(tidNode2, listNode4);
        }
	nodeList.add(pexpraritimeticaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAcomargsargs1Args */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAcomargsargs2Args */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AMultiArgsListaArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pexprNode1 = (PExpr)nodeArrayList3.get(0);
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode3.add(pexprNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AUmArgsListaArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 3}, {29, SHIFT, 10}, },
			{{-1, ERROR, 4}, {32, ACCEPT, -1}, },
			{{-1, ERROR, 5}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 11}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 8}, {29, SHIFT, 14}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 10}, {21, SHIFT, 15}, },
			{{-1, ERROR, 11}, {6, SHIFT, 16}, {29, SHIFT, 10}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 14}, {19, SHIFT, 17}, {21, SHIFT, 18}, },
			{{-1, ERROR, 15}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 19}, },
			{{-1, ERROR, 16}, {21, SHIFT, 24}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 18}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 19}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 20}, {29, SHIFT, 26}, },
			{{-1, ERROR, 21}, {22, SHIFT, 27}, },
			{{-1, REDUCE, 11}, {20, SHIFT, 28}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 24}, {5, SHIFT, 29}, },
			{{-1, ERROR, 25}, {22, SHIFT, 30}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 27}, {25, SHIFT, 31}, },
			{{-1, ERROR, 28}, {2, SHIFT, 1}, {3, SHIFT, 2}, },
			{{-1, ERROR, 29}, {22, SHIFT, 34}, },
			{{-1, ERROR, 30}, {25, SHIFT, 31}, },
			{{-1, ERROR, 31}, {1, SHIFT, 36}, {2, SHIFT, 1}, {3, SHIFT, 2}, {4, SHIFT, 37}, {7, SHIFT, 38}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 41}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 34}, {25, SHIFT, 31}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 36}, {21, SHIFT, 60}, },
			{{-1, ERROR, 37}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 41}, },
			{{-1, ERROR, 38}, {21, SHIFT, 62}, },
			{{-1, ERROR, 39}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 41}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 50}, {18, SHIFT, 64}, {21, SHIFT, 65}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 43}, {29, SHIFT, 66}, },
			{{-1, ERROR, 44}, {1, SHIFT, 36}, {2, SHIFT, 1}, {3, SHIFT, 2}, {4, SHIFT, 37}, {7, SHIFT, 38}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 41}, },
			{{-1, ERROR, 45}, {1, SHIFT, 36}, {4, SHIFT, 37}, {7, SHIFT, 38}, {21, SHIFT, 39}, {26, SHIFT, 69}, {28, SHIFT, 40}, {29, SHIFT, 41}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 52}, {19, SHIFT, 71}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 35}, {8, SHIFT, 72}, {9, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {14, SHIFT, 76}, {15, SHIFT, 77}, {16, SHIFT, 78}, {17, SHIFT, 79}, },
			{{-1, REDUCE, 45}, {10, SHIFT, 80}, {11, SHIFT, 81}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 60}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 82}, },
			{{-1, ERROR, 61}, {19, SHIFT, 85}, },
			{{-1, ERROR, 62}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 82}, },
			{{-1, ERROR, 63}, {22, SHIFT, 87}, },
			{{-1, ERROR, 64}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 41}, },
			{{-1, REDUCE, 54}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 41}, },
			{{-1, ERROR, 66}, {19, SHIFT, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 68}, {1, SHIFT, 36}, {4, SHIFT, 37}, {7, SHIFT, 38}, {21, SHIFT, 39}, {26, SHIFT, 92}, {28, SHIFT, 40}, {29, SHIFT, 41}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 72}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 82}, },
			{{-1, ERROR, 73}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 82}, },
			{{-1, ERROR, 74}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 82}, },
			{{-1, ERROR, 75}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 82}, },
			{{-1, ERROR, 76}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 82}, },
			{{-1, ERROR, 77}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 82}, },
			{{-1, ERROR, 78}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 82}, },
			{{-1, ERROR, 79}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 82}, },
			{{-1, ERROR, 80}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 82}, },
			{{-1, ERROR, 81}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 82}, },
			{{-1, REDUCE, 50}, {21, SHIFT, 65}, },
			{{-1, ERROR, 83}, {22, SHIFT, 103}, },
			{{-1, ERROR, 84}, {8, SHIFT, 72}, {9, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {14, SHIFT, 76}, {15, SHIFT, 77}, {16, SHIFT, 78}, {17, SHIFT, 79}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 86}, {22, SHIFT, 104}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 90}, {22, SHIFT, 105}, },
			{{-1, REDUCE, 55}, {20, SHIFT, 106}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 43}, {10, SHIFT, 80}, {11, SHIFT, 81}, },
			{{-1, REDUCE, 44}, {10, SHIFT, 80}, {11, SHIFT, 81}, },
			{{-1, REDUCE, 37}, {8, SHIFT, 72}, {9, SHIFT, 73}, },
			{{-1, REDUCE, 38}, {8, SHIFT, 72}, {9, SHIFT, 73}, },
			{{-1, REDUCE, 39}, {8, SHIFT, 72}, {9, SHIFT, 73}, },
			{{-1, REDUCE, 40}, {8, SHIFT, 72}, {9, SHIFT, 73}, },
			{{-1, REDUCE, 41}, {8, SHIFT, 72}, {9, SHIFT, 73}, },
			{{-1, REDUCE, 42}, {8, SHIFT, 72}, {9, SHIFT, 73}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 103}, {1, SHIFT, 36}, {4, SHIFT, 37}, {7, SHIFT, 38}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 41}, },
			{{-1, ERROR, 104}, {1, SHIFT, 36}, {4, SHIFT, 37}, {7, SHIFT, 38}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 41}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 106}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 41}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 22}, {0, SHIFT, 111}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 111}, {1, SHIFT, 36}, {4, SHIFT, 37}, {7, SHIFT, 38}, {21, SHIFT, 39}, {28, SHIFT, 40}, {29, SHIFT, 41}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 28}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 12}, },
			{{-1, 5}, },
			{{-1, 6}, {5, 13}, },
			{{-1, 7}, {31, 42}, {44, 67}, },
			{{-1, 20}, {0, 8}, {5, 8}, {31, 43}, {44, 43}, },
			{{-1, 9}, },
			{{-1, 21}, {18, 25}, },
			{{-1, 22}, },
			{{-1, 23}, {28, 33}, },
			{{-1, 32}, {30, 35}, {34, 59}, },
			{{-1, 44}, },
			{{-1, 45}, {44, 68}, },
			{{-1, 46}, {45, 70}, {68, 70}, {103, 107}, {104, 109}, },
			{{-1, 47}, {103, 108}, {111, 112}, },
			{{-1, 48}, {111, 113}, },
			{{-1, 49}, },
			{{-1, 50}, },
			{{-1, 51}, },
			{{-1, 52}, {37, 61}, {39, 63}, {64, 88}, {65, 89}, {106, 110}, },
			{{-1, 53}, },
			{{-1, 54}, {60, 83}, {62, 86}, },
			{{-1, 55}, {60, 84}, {62, 84}, {74, 95}, {75, 96}, {76, 97}, {77, 98}, {78, 99}, {79, 100}, },
			{{-1, 56}, {72, 93}, {73, 94}, },
			{{-1, 57}, {80, 101}, {81, 102}, },
			{{-1, 58}, },
			{{-1, 90}, },
			{{-1, 91}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'int', 'string', 'void'",
			"expecting: id",
			"expecting: EOF",
			"expecting: '('",
			"expecting: 'main', id",
			"expecting: ';', '('",
			"expecting: 'if', 'int', 'string', 'return', 'void', 'while', '(', num, id",
			"expecting: ')'",
			"expecting: ',', ')'",
			"expecting: 'void'",
			"expecting: '{'",
			"expecting: 'int', 'string'",
			"expecting: 'if', 'int', 'string', 'return', 'while', '(', num, id",
			"expecting: '(', num, id",
			"expecting: '+', '-', '*', '/', '<', '<=', '>', '>=', '==', '!=', ';', ',', ')'",
			"expecting: '+', '-', '*', '/', '<', '<=', '>', '>=', '==', '!=', '=', ';', ',', '(', ')'",
			"expecting: 'if', 'return', 'while', '(', '}', num, id",
			"expecting: 'else', 'if', 'return', 'while', '(', '}', num, id",
			"expecting: ';'",
			"expecting: ';', ',', ')'",
			"expecting: '+', '-', '<', '<=', '>', '>=', '==', '!=', ';', ',', ')'",
			"expecting: '(', ')', num, id",
			"expecting: 'int', 'string', 'void', EOF",
			"expecting: '+', '-', '*', '/', '<', '<=', '>', '>=', '==', '!=', ';', ',', '(', ')'",
			"expecting: '+', '-', '<', '<=', '>', '>=', '==', '!='",
			"expecting: '+', '-', ';', ',', ')'",
			"expecting: 'if', 'return', 'while', '(', num, id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 2, 0, 0, 0, 1, 0, 3, 4, 2, 0, 5, 0, 3, 6, 0, 7, 1, 7, 8, 8, 9, 7, 8, 10, 11, 7, 10, 12, 0, 8, 10, 0, 3, 13, 3, 13, 14, 15, 12, 1, 12, 16, 16, 16, 16, 17, 16, 17, 18, 19, 19, 20, 14, 14, 14, 2, 13, 18, 13, 7, 13, 21, 18, 12, 16, 22, 16, 17, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 23, 7, 24, 17, 7, 14, 19, 8, 7, 8, 22, 14, 14, 25, 25, 25, 25, 25, 25, 14, 14, 26, 26, 14, 13, 16, 17, 16, 8, 26, 17, 16, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
