/* This file was generated by SableCC (http://www.sablecc.org/). */

package cminus.analysis;

import java.util.*;
import cminus.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracao());
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMain() != null)
        {
            node.getMain().apply(this);
        }
        outAProgram(node);
    }

    public void inAVarDeclaracao(AVarDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVarDeclaracao(AVarDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDeclaracao(AVarDeclaracao node)
    {
        inAVarDeclaracao(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVarDeclaracao(node);
    }

    public void inAFunDeclaracao(AFunDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAFunDeclaracao(AFunDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunDeclaracao(AFunDeclaracao node)
    {
        inAFunDeclaracao(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PParametro> copy = new ArrayList<PParametro>(node.getParametro());
            for(PParametro e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInstrucoesCompostas() != null)
        {
            node.getInstrucoesCompostas().apply(this);
        }
        outAFunDeclaracao(node);
    }

    public void inAMainFunDeclaracao(AMainFunDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAMainFunDeclaracao(AMainFunDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMainFunDeclaracao(AMainFunDeclaracao node)
    {
        inAMainFunDeclaracao(node);
        if(node.getInstrucoesCompostas() != null)
        {
            node.getInstrucoesCompostas().apply(this);
        }
        outAMainFunDeclaracao(node);
    }

    public void inAStringTipo(AStringTipo node)
    {
        defaultIn(node);
    }

    public void outAStringTipo(AStringTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTipo(AStringTipo node)
    {
        inAStringTipo(node);
        if(node.getKwString() != null)
        {
            node.getKwString().apply(this);
        }
        outAStringTipo(node);
    }

    public void inAIntTipo(AIntTipo node)
    {
        defaultIn(node);
    }

    public void outAIntTipo(AIntTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTipo(AIntTipo node)
    {
        inAIntTipo(node);
        if(node.getKwInt() != null)
        {
            node.getKwInt().apply(this);
        }
        outAIntTipo(node);
    }

    public void inAVoidTipo(AVoidTipo node)
    {
        defaultIn(node);
    }

    public void outAVoidTipo(AVoidTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidTipo(AVoidTipo node)
    {
        inAVoidTipo(node);
        if(node.getKwVoid() != null)
        {
            node.getKwVoid().apply(this);
        }
        outAVoidTipo(node);
    }

    public void inADeclParamParametro(ADeclParamParametro node)
    {
        defaultIn(node);
    }

    public void outADeclParamParametro(ADeclParamParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclParamParametro(ADeclParamParametro node)
    {
        inADeclParamParametro(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outADeclParamParametro(node);
    }

    public void inADeclParamVoidParametro(ADeclParamVoidParametro node)
    {
        defaultIn(node);
    }

    public void outADeclParamVoidParametro(ADeclParamVoidParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclParamVoidParametro(ADeclParamVoidParametro node)
    {
        inADeclParamVoidParametro(node);
        if(node.getKwVoid() != null)
        {
            node.getKwVoid().apply(this);
        }
        outADeclParamVoidParametro(node);
    }

    public void inAIfelseInstrucao(AIfelseInstrucao node)
    {
        defaultIn(node);
    }

    public void outAIfelseInstrucao(AIfelseInstrucao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfelseInstrucao(AIfelseInstrucao node)
    {
        inAIfelseInstrucao(node);
        if(node.getExprLogica() != null)
        {
            node.getExprLogica().apply(this);
        }
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAIfelseInstrucao(node);
    }

    public void inAInstExprInstrucao(AInstExprInstrucao node)
    {
        defaultIn(node);
    }

    public void outAInstExprInstrucao(AInstExprInstrucao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstExprInstrucao(AInstExprInstrucao node)
    {
        inAInstExprInstrucao(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAInstExprInstrucao(node);
    }

    public void inAIfPendenteInstrucao(AIfPendenteInstrucao node)
    {
        defaultIn(node);
    }

    public void outAIfPendenteInstrucao(AIfPendenteInstrucao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfPendenteInstrucao(AIfPendenteInstrucao node)
    {
        inAIfPendenteInstrucao(node);
        if(node.getExprLogica() != null)
        {
            node.getExprLogica().apply(this);
        }
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outAIfPendenteInstrucao(node);
    }

    public void inAInstWhileInstrucao(AInstWhileInstrucao node)
    {
        defaultIn(node);
    }

    public void outAInstWhileInstrucao(AInstWhileInstrucao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstWhileInstrucao(AInstWhileInstrucao node)
    {
        inAInstWhileInstrucao(node);
        if(node.getExprLogica() != null)
        {
            node.getExprLogica().apply(this);
        }
        if(node.getInstrucao() != null)
        {
            node.getInstrucao().apply(this);
        }
        outAInstWhileInstrucao(node);
    }

    public void inAInstReturnInstrucao(AInstReturnInstrucao node)
    {
        defaultIn(node);
    }

    public void outAInstReturnInstrucao(AInstReturnInstrucao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstReturnInstrucao(AInstReturnInstrucao node)
    {
        inAInstReturnInstrucao(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAInstReturnInstrucao(node);
    }

    public void inAInstrucoesCompostas(AInstrucoesCompostas node)
    {
        defaultIn(node);
    }

    public void outAInstrucoesCompostas(AInstrucoesCompostas node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstrucoesCompostas(AInstrucoesCompostas node)
    {
        inAInstrucoesCompostas(node);
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracao());
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PInstrucao> copy = new ArrayList<PInstrucao>(node.getInstrucao());
            for(PInstrucao e : copy)
            {
                e.apply(this);
            }
        }
        outAInstrucoesCompostas(node);
    }

    public void inAAtribuicaoExpr(AAtribuicaoExpr node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoExpr(AAtribuicaoExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoExpr(AAtribuicaoExpr node)
    {
        inAAtribuicaoExpr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAtribuicaoExpr(node);
    }

    public void inAExprAritimeticaExpr(AExprAritimeticaExpr node)
    {
        defaultIn(node);
    }

    public void outAExprAritimeticaExpr(AExprAritimeticaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprAritimeticaExpr(AExprAritimeticaExpr node)
    {
        inAExprAritimeticaExpr(node);
        if(node.getExprAritimetica() != null)
        {
            node.getExprAritimetica().apply(this);
        }
        outAExprAritimeticaExpr(node);
    }

    public void inAExprLogicaExpr(AExprLogicaExpr node)
    {
        defaultIn(node);
    }

    public void outAExprLogicaExpr(AExprLogicaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprLogicaExpr(AExprLogicaExpr node)
    {
        inAExprLogicaExpr(node);
        if(node.getExprLogica() != null)
        {
            node.getExprLogica().apply(this);
        }
        outAExprLogicaExpr(node);
    }

    public void inAMenorExprLogica(AMenorExprLogica node)
    {
        defaultIn(node);
    }

    public void outAMenorExprLogica(AMenorExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExprLogica(AMenorExprLogica node)
    {
        inAMenorExprLogica(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        outAMenorExprLogica(node);
    }

    public void inAMenorigualExprLogica(AMenorigualExprLogica node)
    {
        defaultIn(node);
    }

    public void outAMenorigualExprLogica(AMenorigualExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorigualExprLogica(AMenorigualExprLogica node)
    {
        inAMenorigualExprLogica(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        outAMenorigualExprLogica(node);
    }

    public void inAMaiorExprLogica(AMaiorExprLogica node)
    {
        defaultIn(node);
    }

    public void outAMaiorExprLogica(AMaiorExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorExprLogica(AMaiorExprLogica node)
    {
        inAMaiorExprLogica(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        outAMaiorExprLogica(node);
    }

    public void inAMaiorigualExprLogica(AMaiorigualExprLogica node)
    {
        defaultIn(node);
    }

    public void outAMaiorigualExprLogica(AMaiorigualExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorigualExprLogica(AMaiorigualExprLogica node)
    {
        inAMaiorigualExprLogica(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        outAMaiorigualExprLogica(node);
    }

    public void inAIgualExprLogica(AIgualExprLogica node)
    {
        defaultIn(node);
    }

    public void outAIgualExprLogica(AIgualExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExprLogica(AIgualExprLogica node)
    {
        inAIgualExprLogica(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        outAIgualExprLogica(node);
    }

    public void inADiferenteExprLogica(ADiferenteExprLogica node)
    {
        defaultIn(node);
    }

    public void outADiferenteExprLogica(ADiferenteExprLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteExprLogica(ADiferenteExprLogica node)
    {
        inADiferenteExprLogica(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        outADiferenteExprLogica(node);
    }

    public void inAAddExprAritimetica(AAddExprAritimetica node)
    {
        defaultIn(node);
    }

    public void outAAddExprAritimetica(AAddExprAritimetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExprAritimetica(AAddExprAritimetica node)
    {
        inAAddExprAritimetica(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        outAAddExprAritimetica(node);
    }

    public void inASubExprAritimetica(ASubExprAritimetica node)
    {
        defaultIn(node);
    }

    public void outASubExprAritimetica(ASubExprAritimetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExprAritimetica(ASubExprAritimetica node)
    {
        inASubExprAritimetica(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        outASubExprAritimetica(node);
    }

    public void inAMultExprAritimetica(AMultExprAritimetica node)
    {
        defaultIn(node);
    }

    public void outAMultExprAritimetica(AMultExprAritimetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExprAritimetica(AMultExprAritimetica node)
    {
        inAMultExprAritimetica(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        outAMultExprAritimetica(node);
    }

    public void inADivExprAritimetica(ADivExprAritimetica node)
    {
        defaultIn(node);
    }

    public void outADivExprAritimetica(ADivExprAritimetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExprAritimetica(ADivExprAritimetica node)
    {
        inADivExprAritimetica(node);
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        outADivExprAritimetica(node);
    }

    public void inAVariavelExprAritimetica(AVariavelExprAritimetica node)
    {
        defaultIn(node);
    }

    public void outAVariavelExprAritimetica(AVariavelExprAritimetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelExprAritimetica(AVariavelExprAritimetica node)
    {
        inAVariavelExprAritimetica(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVariavelExprAritimetica(node);
    }

    public void inANumeroExprAritimetica(ANumeroExprAritimetica node)
    {
        defaultIn(node);
    }

    public void outANumeroExprAritimetica(ANumeroExprAritimetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroExprAritimetica(ANumeroExprAritimetica node)
    {
        inANumeroExprAritimetica(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outANumeroExprAritimetica(node);
    }

    public void inAExprExprAritimetica(AExprExprAritimetica node)
    {
        defaultIn(node);
    }

    public void outAExprExprAritimetica(AExprExprAritimetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprExprAritimetica(AExprExprAritimetica node)
    {
        inAExprExprAritimetica(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExprExprAritimetica(node);
    }

    public void inAChamadaFunExprAritimetica(AChamadaFunExprAritimetica node)
    {
        defaultIn(node);
    }

    public void outAChamadaFunExprAritimetica(AChamadaFunExprAritimetica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaFunExprAritimetica(AChamadaFunExprAritimetica node)
    {
        inAChamadaFunExprAritimetica(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getExpr());
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAChamadaFunExprAritimetica(node);
    }
}
